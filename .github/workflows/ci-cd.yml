
name: WorkProfile CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

env:
  IMAGE_NAME: tehilaalkoby/workprofile
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Generate version
        id: version
        run: |
          VERSION="v1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} ${{ env.IMAGE_NAME }}:latest

      - name: Test container
        run: |
          docker run -d -p 5000:5000 --name test_container ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          sleep 10
          curl --fail http://localhost:5000/ || exit 1
          curl --fail http://localhost:5000/health || exit 1
          docker rm -f test_container

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          docker push ${{ env.IMAGE_NAME }}:latest

  test-deployment:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Create kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: test-cluster

      - name: Prepare Kubernetes manifests
        run: |
          sed "s/IMAGE_PLACEHOLDER/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }}/g" k8s/deployment.yaml > k8s/deployment-ready.yaml

      - name: Deploy to kind cluster
        run: |
          kubectl apply -f k8s/deployment-ready.yaml
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment/workprofile-deployment --timeout=300s

      - name: Test deployment
        run: |
          kubectl port-forward service/workprofile-service 8080:5000 &
          sleep 10
          curl --fail http://localhost:8080/ || exit 1
          curl --fail http://localhost:8080/health || exit 1

      - name: Manual deployment instructions
        run: |
          echo "=== MANUAL DEPLOYMENT TO KILLERCODA ==="
          echo "1. Connect to your Killercoda Kubernetes session"
          echo "2. Apply the following commands:"
          echo ""
          echo "# Update deployment image"
          echo "kubectl set image deployment/workprofile-deployment workprofile=${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }}"
          echo ""
          echo "# Or apply fresh deployment:"
          echo "kubectl apply -f - <<EOF"
          cat k8s/deployment-ready.yaml
          echo "EOF"
          echo ""
          echo "kubectl apply -f - <<EOF"
          cat k8s/service.yaml
          echo "EOF"
          echo ""
          echo "3. Check deployment status:"
          echo "kubectl get pods,svc"
          echo ""
          echo "4. Access application:"
          echo "kubectl get service workprofile-service"
          echo "# Use the NodePort shown to access via browser"
          echo ""
          echo "Version deployed: ${{ needs.build-and-test.outputs.version }}"
